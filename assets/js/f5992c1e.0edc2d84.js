/*! For license information please see f5992c1e.0edc2d84.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[378329],{439799:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>f});var o=t(824246),n=t(511151);const a={id:"plugin-scaffolder-react.scaffolderrjsfformprops",title:"ScaffolderRJSFFormProps",description:"API reference for ScaffolderRJSFFormProps"},s=void 0,i={id:"reference/plugin-scaffolder-react.scaffolderrjsfformprops",title:"ScaffolderRJSFFormProps",description:"API reference for ScaffolderRJSFFormProps",source:"@site/../docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.md",sourceDirName:"reference",slug:"/reference/plugin-scaffolder-react.scaffolderrjsfformprops",permalink:"/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.md",tags:[],version:"current",frontMatter:{id:"plugin-scaffolder-react.scaffolderrjsfformprops",title:"ScaffolderRJSFFormProps",description:"API reference for ScaffolderRJSFFormProps"}},c={},f=[{value:"Properties",id:"properties",level:2}];function l(e){const r={a:"a",code:"code",em:"em",form:"form",h2:"h2",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.a,{href:"/docs/reference/",children:"Home"})," > ",(0,o.jsx)(r.a,{href:"/docs/reference/plugin-scaffolder-react",children:(0,o.jsx)(r.code,{children:"@backstage/plugin-scaffolder-react"})})," > ",(0,o.jsx)(r.a,{href:"/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops",children:(0,o.jsx)(r.code,{children:"ScaffolderRJSFFormProps"})})]}),"\n",(0,o.jsxs)(r.p,{children:["The properties that are passed to the ",(0,o.jsx)(r.code,{children:"Form"})]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Signature:"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"export interface ScaffolderRJSFFormProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> \n"})}),"\n",(0,o.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,o.jsxs)(r.table,{children:[(0,o.jsx)(r.thead,{children:(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.th,{children:"Property"}),(0,o.jsx)(r.th,{children:"Modifiers"}),(0,o.jsx)(r.th,{children:"Type"}),(0,o.jsx)(r.th,{children:"Description"})]})}),(0,o.jsx)(r.tbody,{children:(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:(0,o.jsx)(r.a,{href:"/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops._internalformwrapper",children:"_internalFormWrapper?"})}),(0,o.jsx)(r.td,{}),(0,o.jsx)(r.td,{children:"ElementType"}),(0,o.jsxs)(r.td,{children:[(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.em,{children:"(Optional)"})," _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around ",(0,o.jsx)(r.code,{children:"<Form />"})," that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two props: ",(0,o.jsx)(r.code,{children:"children"})," and ",(0,o.jsx)(r.code,{children:"as"}),". That component, at minimum, should render the ",(0,o.jsx)(r.code,{children:"children"})," inside of a "]}),(0,o.jsxs)(r.form,{children:[" tag unless ",(0,o.jsx)(r.code,{children:"as"})," is provided, in which case, use the ",(0,o.jsx)(r.code,{children:"as"})," prop in place of ",(0,o.jsx)(r.code,{children:"<form />"}),". i.e.:",(0,o.jsx)(r.p,{})]})]})]})})]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"export default function InternalForm({ children, as }) {\n  const FormTag = as || 'form';\n  return <FormTag>{children}</FormTag>;\n}\n"})}),"\n",(0,o.jsx)(r.p,{children:"Use at your own risk as this prop is private and may change at any time without notice."})," |\n|  [acceptcharset?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.acceptcharset) |  | string | _(Optional)_ The value of this prop will be passed to the ",(0,o.jsx)(r.code,{children:"accept-charset"})," HTML attribute on the form |\n|  [action?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.action) |  | string | ",(0,o.jsxs)(r.p,{children:["_(Optional)_ The value of this prop will be passed to the ",(0,o.jsx)(r.code,{children:"action"})," HTML attribute on the form"]}),(0,o.jsxs)(r.p,{children:["NOTE: this just renders the ",(0,o.jsx)(r.code,{children:"action"})," attribute in the HTML markup. There is no real network request being sent to this ",(0,o.jsx)(r.code,{children:"action"})," on submit. Instead, react-jsonschema-form catches the submit event with ",(0,o.jsx)(r.code,{children:"event.preventDefault()"})," and then calls the ",(0,o.jsx)(r.code,{children:"onSubmit"})," function, where you could send a request programmatically with ",(0,o.jsx)(r.code,{children:"fetch"})," or similar."]})," |\n|  [autoComplete?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.autocomplete) |  | string | _(Optional)_ The value of this prop will be passed to the ",(0,o.jsx)(r.code,{children:"autocomplete"})," HTML attribute on the form |\n|  [children?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.children) |  | ReactNode | _(Optional)_ The optional children for the form, if provided, it will replace the default ",(0,o.jsx)(r.code,{children:"SubmitButton"})," |\n|  [className?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.classname) |  | string | _(Optional)_ The value of this prop will be passed to the ",(0,o.jsx)(r.code,{children:"class"})," HTML attribute on the form |\n|  [customValidate?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.customvalidate) |  | CustomValidator<T, S, F> | _(Optional)_ Formerly the ",(0,o.jsx)(r.code,{children:"validate"})," prop; Takes a function that specifies custom validation rules for the form |\n|  [disabled?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.disabled) |  | boolean | _(Optional)_ It's possible to disable the whole form by setting the ",(0,o.jsx)(r.code,{children:"disabled"})," prop. The ",(0,o.jsx)(r.code,{children:"disabled"})," prop is then forwarded down to each field of the form. If you just want to disable some fields, see the ",(0,o.jsx)(r.code,{children:"ui:disabled"})," parameter in ",(0,o.jsx)(r.code,{children:"uiSchema"})," |\n|  [enctype?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.enctype) |  | string | _(Optional)_ The value of this prop will be passed to the ",(0,o.jsx)(r.code,{children:"enctype"})," HTML attribute on the form |\n|  [experimental\\_defaultFormStateBehavior?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.experimental_defaultformstatebehavior) |  | Experimental\\_DefaultFormStateBehavior | _(Optional)_ Optional configuration object with flags, if provided, allows users to override default form state behavior Currently only affecting minItems on array fields and handling of setting defaults based on the value of ",(0,o.jsx)(r.code,{children:"emptyObjectFields"})," |\n|  [extraErrors?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.extraerrors) |  | ErrorSchema<T> | _(Optional)_ This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it can be used to implement asynchronous validation |\n|  [fields?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.fields) |  | [ScaffolderRJSFRegistryFieldsType](/docs/reference/plugin-scaffolder-react.scaffolderrjsfregistryfieldstype)<T, S, F> | _(Optional)_ The dictionary of registered fields in the form |\n|  [focusOnFirstError?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.focusonfirsterror) |  | boolean | ((error: RJSFValidationError) => void) | _(Optional)_ If set to true, then the first field with an error will receive the focus when the form is submitted with errors |\n|  [formContext?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.formcontext) |  | F | ",(0,o.jsxs)(r.p,{children:["_(Optional)_ You can provide a ",(0,o.jsx)(r.code,{children:"formContext"})," object to the form, which is passed down to all fields and widgets. Useful for implementing context aware fields and widgets."]}),(0,o.jsxs)(r.p,{children:["NOTE: Setting ",(0,o.jsx)(r.code,{children:"{readonlyAsDisabled: false}"})," on the formContext will make the antd theme treat readOnly fields as disabled."]})," |\n|  [formData?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.formdata) |  | T | _(Optional)_ The data for the form, used to prefill a form with existing data |\n|  [id?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.id) |  | string | _(Optional)_ The value of this prop will be passed to the ",(0,o.jsx)(r.code,{children:"id"})," HTML attribute on the form |\n|  [idPrefix?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.idprefix) |  | string | _(Optional)_ To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids; Default is ",(0,o.jsx)(r.code,{children:"root"})," |\n|  [idSeparator?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.idseparator) |  | string | _(Optional)_ To avoid using a path separator that is present in field names, it is possible to change the separator used for ids (Default is ",(0,o.jsx)(r.code,{children:"_"}),") |\n|  [liveOmit?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.liveomit) |  | boolean | _(Optional)_ If ",(0,o.jsx)(r.code,{children:"omitExtraData"})," and ",(0,o.jsx)(r.code,{children:"liveOmit"})," are both set to true, then extra form data values that are not in any form field will be removed whenever ",(0,o.jsx)(r.code,{children:"onChange"})," is called. Set to ",(0,o.jsx)(r.code,{children:"false"})," by default |\n|  [liveValidate?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.livevalidate) |  | boolean | _(Optional)_ If set to true, the form will perform validation and show any validation errors whenever the form data is changed, rather than just on submit |\n|  [method?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.method) |  | string | _(Optional)_ The value of this prop will be passed to the ",(0,o.jsx)(r.code,{children:"method"})," HTML attribute on the form |\n|  [name?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.name) |  | string | _(Optional)_ The value of this prop will be passed to the ",(0,o.jsx)(r.code,{children:"name"})," HTML attribute on the form |\n|  [noHtml5Validate?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.nohtml5validate) |  | boolean | _(Optional)_ If set to true, turns off HTML5 validation on the form; Set to ",(0,o.jsx)(r.code,{children:"false"})," by default |\n|  [noValidate?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.novalidate) |  | boolean | _(Optional)_ If set to true, turns off all validation. Set to ",(0,o.jsx)(r.code,{children:"false"})," by default |\n|  [omitExtraData?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.omitextradata) |  | boolean | _(Optional)_ If set to true, then extra form data values that are not in any form field will be removed whenever ",(0,o.jsx)(r.code,{children:"onSubmit"})," is called. Set to ",(0,o.jsx)(r.code,{children:"false"})," by default. |\n|  [onBlur?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.onblur) |  | (id: string, data: any) => void | _(Optional)_ Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass an ",(0,o.jsx)(r.code,{children:"onBlur"})," handler, which will receive the id of the input that was blurred and the field value |\n|  [onChange?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.onchange) |  | (data: IChangeEvent<T, S, F>, id?: string) => void | _(Optional)_ If you plan on being notified every time the form data are updated, you can pass an ",(0,o.jsx)(r.code,{children:"onChange"})," handler, which will receive the same args as ",(0,o.jsx)(r.code,{children:"onSubmit"})," any time a value is updated in the form. Can also return the ",(0,o.jsx)(r.code,{children:"id"})," of the field that caused the change |\n|  [onError?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.onerror) |  | (errors: RJSFValidationError\\[\\]) => void | _(Optional)_ To react when submitted form data are invalid, pass an ",(0,o.jsx)(r.code,{children:"onError"})," handler. It will be passed the list of encountered errors |\n|  [onFocus?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.onfocus) |  | (id: string, data: any) => void | _(Optional)_ Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass an ",(0,o.jsx)(r.code,{children:"onFocus"})," handler, which will receive the id of the input that is focused and the field value |\n|  [onSubmit?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.onsubmit) |  | (data: IChangeEvent<T, S, F>, event: FormEvent<any>) => void | _(Optional)_ You can pass a function as the ",(0,o.jsx)(r.code,{children:"onSubmit"})," prop of your ",(0,o.jsx)(r.code,{children:"Form"})," component to listen to when the form is submitted and its data are valid. It will be passed a result object having a ",(0,o.jsx)(r.code,{children:"formData"})," attribute, which is the valid form data you're usually after. The original event will also be passed as a second parameter |\n|  [readonly?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.readonly) |  | boolean | _(Optional)_ It's possible to make the whole form read-only by setting the ",(0,o.jsx)(r.code,{children:"readonly"})," prop. The ",(0,o.jsx)(r.code,{children:"readonly"})," prop is then forwarded down to each field of the form. If you just want to make some fields read-only, see the ",(0,o.jsx)(r.code,{children:"ui:readonly"})," parameter in ",(0,o.jsx)(r.code,{children:"uiSchema"})," |\n|  [ref?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.ref) |  | Ref<Form<T, S, F>> | _(Optional)_ Support receiving a React ref to the Form |\n|  [schema](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.schema) |  | S | The JSON schema object for the form |\n|  [showErrorList?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.showerrorlist) |  | false | 'top' | 'bottom' | _(Optional)_ When this prop is set to ",(0,o.jsx)(r.code,{children:"top"})," or 'bottom', a list of errors (or the custom error list defined in the ",(0,o.jsx)(r.code,{children:"ErrorList"}),") will also show. When set to false, only inline input validation errors will be shown. Set to ",(0,o.jsx)(r.code,{children:"top"})," by default |\n|  [tagName?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.tagname) |  | ElementType | _(Optional)_ It's possible to change the default ",(0,o.jsx)(r.code,{children:"form"})," tag name to a different HTML tag, which can be helpful if you are nesting forms. However, native browser form behaviour, such as submitting when the ",(0,o.jsx)(r.code,{children:"Enter"})," key is pressed, may no longer work |\n|  [target?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.target) |  | string | _(Optional)_ The value of this prop will be passed to the ",(0,o.jsx)(r.code,{children:"target"})," HTML attribute on the form |\n|  [templates?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.templates) |  | Partial<Omit<TemplatesType<T, S, F>, 'ButtonTemplates'>> & { ButtonTemplates?: Partial<TemplatesType<T, S, F>\\['ButtonTemplates'\\]>; } | _(Optional)_ The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults |\n|  [transformErrors?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.transformerrors) |  | ErrorTransformer<T, S, F> | _(Optional)_ A function can be passed to this prop in order to make modifications to the default errors resulting from JSON Schema validation |\n|  [translateString?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.translatestring) |  | Registry\\['translateString'\\] | _(Optional)_ Optional string translation function, if provided, allows users to change the translation of the RJSF internal strings. Some strings contain replaceable parameter values as indicated by ",(0,o.jsx)(r.code,{children:"%1"}),", ",(0,o.jsx)(r.code,{children:"%2"}),", etc. The number after the ",(0,o.jsx)(r.code,{children:"%"})," indicates the order of the parameter. The ordering of parameters is important because some languages may choose to put the second parameter before the first in its translation. |\n|  [uiSchema?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.uischema) |  | UiSchema<T, S, F> | _(Optional)_ The uiSchema for the form |\n|  [validator](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.validator) |  | ValidatorType<T, S, F> | An implementation of the ",(0,o.jsx)(r.code,{children:"ValidatorType"})," interface that is needed for form validation to work |\n|  [widgets?](/docs/reference/plugin-scaffolder-react.scaffolderrjsfformprops.widgets) |  | RegistryWidgetsType<T, S, F> | _(Optional)_ The dictionary of registered widgets in the form |\n"]})}function d(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},371426:(e,r,t)=>{var o=t(827378),n=Symbol.for("react.element"),a=Symbol.for("react.fragment"),s=Object.prototype.hasOwnProperty,i=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function f(e,r,t){var o,a={},f=null,l=null;for(o in void 0!==t&&(f=""+t),void 0!==r.key&&(f=""+r.key),void 0!==r.ref&&(l=r.ref),r)s.call(r,o)&&!c.hasOwnProperty(o)&&(a[o]=r[o]);if(e&&e.defaultProps)for(o in r=e.defaultProps)void 0===a[o]&&(a[o]=r[o]);return{$$typeof:n,type:e,key:f,ref:l,props:a,_owner:i.current}}r.Fragment=a,r.jsx=f,r.jsxs=f},541535:(e,r)=>{var t=Symbol.for("react.element"),o=Symbol.for("react.portal"),n=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),c=Symbol.for("react.context"),f=Symbol.for("react.forward_ref"),l=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),u=Symbol.iterator;var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,y={};function j(e,r,t){this.props=e,this.context=r,this.refs=y,this.updater=t||h}function g(){}function b(e,r,t){this.props=e,this.context=r,this.refs=y,this.updater=t||h}j.prototype.isReactComponent={},j.prototype.setState=function(e,r){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,r,"setState")},j.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=j.prototype;var _=b.prototype=new g;_.constructor=b,m(_,j.prototype),_.isPureReactComponent=!0;var x=Array.isArray,v=Object.prototype.hasOwnProperty,w={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function T(e,r,o){var n,a={},s=null,i=null;if(null!=r)for(n in void 0!==r.ref&&(i=r.ref),void 0!==r.key&&(s=""+r.key),r)v.call(r,n)&&!S.hasOwnProperty(n)&&(a[n]=r[n]);var c=arguments.length-2;if(1===c)a.children=o;else if(1<c){for(var f=Array(c),l=0;l<c;l++)f[l]=arguments[l+2];a.children=f}if(e&&e.defaultProps)for(n in c=e.defaultProps)void 0===a[n]&&(a[n]=c[n]);return{$$typeof:t,type:e,key:s,ref:i,props:a,_owner:w.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var F=/\/+/g;function E(e,r){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var r={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return r[e]}))}(""+e.key):r.toString(36)}function k(e,r,n,a,s){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var c=!1;if(null===e)c=!0;else switch(i){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case t:case o:c=!0}}if(c)return s=s(c=e),e=""===a?"."+E(c,0):a,x(s)?(n="",null!=e&&(n=e.replace(F,"$&/")+"/"),k(s,r,n,"",(function(e){return e}))):null!=s&&(O(s)&&(s=function(e,r){return{$$typeof:t,type:e.type,key:r,ref:e.ref,props:e.props,_owner:e._owner}}(s,n+(!s.key||c&&c.key===s.key?"":(""+s.key).replace(F,"$&/")+"/")+e)),r.push(s)),1;if(c=0,a=""===a?".":a+":",x(e))for(var f=0;f<e.length;f++){var l=a+E(i=e[f],f);c+=k(i,r,n,l,s)}else if(l=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=u&&e[u]||e["@@iterator"])?e:null}(e),"function"==typeof l)for(e=l.call(e),f=0;!(i=e.next()).done;)c+=k(i=i.value,r,n,l=a+E(i,f++),s);else if("object"===i)throw r=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===r?"object with keys {"+Object.keys(e).join(", ")+"}":r)+"). If you meant to render a collection of children, use an array instead.");return c}function R(e,r,t){if(null==e)return e;var o=[],n=0;return k(e,o,"","",(function(e){return r.call(t,e,n++)})),o}function C(e){if(-1===e._status){var r=e._result;(r=r()).then((function(r){0!==e._status&&-1!==e._status||(e._status=1,e._result=r)}),(function(r){0!==e._status&&-1!==e._status||(e._status=2,e._result=r)})),-1===e._status&&(e._status=0,e._result=r)}if(1===e._status)return e._result.default;throw e._result}var P={current:null},I={transition:null},$={ReactCurrentDispatcher:P,ReactCurrentBatchConfig:I,ReactCurrentOwner:w};r.Children={map:R,forEach:function(e,r,t){R(e,(function(){r.apply(this,arguments)}),t)},count:function(e){var r=0;return R(e,(function(){r++})),r},toArray:function(e){return R(e,(function(e){return e}))||[]},only:function(e){if(!O(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},r.Component=j,r.Fragment=n,r.Profiler=s,r.PureComponent=b,r.StrictMode=a,r.Suspense=l,r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=$,r.cloneElement=function(e,r,o){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var n=m({},e.props),a=e.key,s=e.ref,i=e._owner;if(null!=r){if(void 0!==r.ref&&(s=r.ref,i=w.current),void 0!==r.key&&(a=""+r.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(f in r)v.call(r,f)&&!S.hasOwnProperty(f)&&(n[f]=void 0===r[f]&&void 0!==c?c[f]:r[f])}var f=arguments.length-2;if(1===f)n.children=o;else if(1<f){c=Array(f);for(var l=0;l<f;l++)c[l]=arguments[l+2];n.children=c}return{$$typeof:t,type:e.type,key:a,ref:s,props:n,_owner:i}},r.createContext=function(e){return(e={$$typeof:c,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},r.createElement=T,r.createFactory=function(e){var r=T.bind(null,e);return r.type=e,r},r.createRef=function(){return{current:null}},r.forwardRef=function(e){return{$$typeof:f,render:e}},r.isValidElement=O,r.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:C}},r.memo=function(e,r){return{$$typeof:d,type:e,compare:void 0===r?null:r}},r.startTransition=function(e){var r=I.transition;I.transition={};try{e()}finally{I.transition=r}},r.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},r.useCallback=function(e,r){return P.current.useCallback(e,r)},r.useContext=function(e){return P.current.useContext(e)},r.useDebugValue=function(){},r.useDeferredValue=function(e){return P.current.useDeferredValue(e)},r.useEffect=function(e,r){return P.current.useEffect(e,r)},r.useId=function(){return P.current.useId()},r.useImperativeHandle=function(e,r,t){return P.current.useImperativeHandle(e,r,t)},r.useInsertionEffect=function(e,r){return P.current.useInsertionEffect(e,r)},r.useLayoutEffect=function(e,r){return P.current.useLayoutEffect(e,r)},r.useMemo=function(e,r){return P.current.useMemo(e,r)},r.useReducer=function(e,r,t){return P.current.useReducer(e,r,t)},r.useRef=function(e){return P.current.useRef(e)},r.useState=function(e){return P.current.useState(e)},r.useSyncExternalStore=function(e,r,t){return P.current.useSyncExternalStore(e,r,t)},r.useTransition=function(){return P.current.useTransition()},r.version="18.2.0"},827378:(e,r,t)=>{e.exports=t(541535)},824246:(e,r,t)=>{e.exports=t(371426)},511151:(e,r,t)=>{t.d(r,{Z:()=>i,a:()=>s});var o=t(667294);const n={},a=o.createContext(n);function s(e){const r=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),o.createElement(a.Provider,{value:r},e.children)}}}]);