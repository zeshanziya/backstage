/*! For license information please see 91d9a0d1.c9c49cfb.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[416064],{980869:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var n=t(824246),i=t(511151);const s={id:"package-metadata",title:"Package Metadata",description:"An inventory of well known package metadata fields in the Backstage ecosystem."},c=void 0,o={id:"tooling/package-metadata",title:"Package Metadata",description:"An inventory of well known package metadata fields in the Backstage ecosystem.",source:"@site/../docs/tooling/package-metadata.md",sourceDirName:"tooling",slug:"/tooling/package-metadata",permalink:"/docs/tooling/package-metadata",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/tooling/package-metadata.md",tags:[],version:"current",frontMatter:{id:"package-metadata",title:"Package Metadata",description:"An inventory of well known package metadata fields in the Backstage ecosystem."},sidebar:"docs",previous:{title:"Debugging Backstage",permalink:"/docs/tooling/local-dev/debugging"},next:{title:"Overview",permalink:"/docs/deployment/"}},r={},l=[{value:"Known Metadata Fields",id:"known-metadata-fields",level:2},{value:"<code>name</code>",id:"name",level:3},{value:"<code>repository</code>",id:"repository",level:3},{value:"<code>main</code>",id:"main",level:3},{value:"<code>exports</code>",id:"exports",level:3},{value:"<code>typeVersions</code>",id:"typeversions",level:3},{value:"<code>sideEffects</code>",id:"sideeffects",level:3},{value:"<code>scripts</code>",id:"scripts",level:3},{value:"<code>configSchema</code>",id:"configschema",level:3},{value:"<code>backstage</code>",id:"backstage",level:3},{value:"<code>backstage.role</code>",id:"backstagerole",level:3},{value:"<code>backstage.pluginId</code>",id:"backstagepluginid",level:3},{value:"<code>backstage.pluginPackages</code>",id:"backstagepluginpackages",level:3},{value:"<code>backstage.pluginPackage</code>",id:"backstagepluginpackage",level:3},{value:"<code>backstage.moved</code>",id:"backstagemoved",level:3},{value:"Metadata for Published Packages",id:"metadata-for-published-packages",level:2}];function d(e){const a={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(a.p,{children:["The ",(0,n.jsx)(a.code,{children:"package.json"})," file is a JSON file that contains metadata about a JavaScript package. It is a ",(0,n.jsx)(a.a,{href:"https://nodejs.org/api/packages.html",children:"Node.js standard"})," that is expanded upon in the ",(0,n.jsx)(a.a,{href:"https://docs.npmjs.com/cli/v10/configuring-npm/package-json",children:"NPM ecosystem"}),", and is required for all packages published to NPM or a similar package registry."]}),"\n",(0,n.jsx)(a.h2,{id:"known-metadata-fields",children:"Known Metadata Fields"}),"\n",(0,n.jsxs)(a.p,{children:["This section documents the known ",(0,n.jsx)(a.code,{children:"package.json"})," metadata fields that play a significant role in the Backstage ecosystem."]}),"\n",(0,n.jsxs)(a.p,{children:["All ",(0,n.jsx)(a.a,{href:"https://docs.npmjs.com/cli/v10/configuring-npm/package-json",children:"fields defined by NPM"})," are inherited by the Backstage ecosystem. The list below only includes those standard fields for which additional information is available."]}),"\n",(0,n.jsx)(a.h3,{id:"name",children:(0,n.jsx)(a.code,{children:"name"})}),"\n",(0,n.jsxs)(a.p,{children:["The name of the package, as defined by ",(0,n.jsx)(a.a,{href:"https://docs.npmjs.com/cli/v10/configuring-npm/package-json#name",children:"NPM"}),". In addition, the following naming scheme is strongly encouraged for packages published in the Backstage ecosystem:"]}),"\n",(0,n.jsxs)(a.p,{children:["First pick a package name prefix that is unique to your organization or collection of packages, but also places it within the Backstage ecosystem, for example: ",(0,n.jsx)(a.code,{children:"@example/backstage"}),", ",(0,n.jsx)(a.code,{children:"@example-backstage/"}),", or ",(0,n.jsx)(a.code,{children:"example-backstage"}),". This prefix should be used by all packages that you publish, regardless of whether they're part of a plugin or not."]}),"\n",(0,n.jsxs)(a.p,{children:["Any package that is not part of a plugin should use the prefix along with a descriptive name, for example: ",(0,n.jsx)(a.code,{children:"@example/backstage-components"})," or ",(0,n.jsx)(a.code,{children:"@example/backstage-foo-client"}),"."]}),"\n",(0,n.jsxs)(a.p,{children:["For plugin packages you should also pick a plugin ID and add ",(0,n.jsx)(a.code,{children:"plugin-<pluginId>"})," to the prefix, along with a suffix based on the package role:"]}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"<prefix>-plugin-<pluginId>"}),": The main frontend code of the plugin."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"<prefix>-plugin-<pluginId>-module-<name>"}),": Optional modules related to the frontend plugin package."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"<prefix>-plugin-<pluginId>-backend"}),": The main backend code of the plugin."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"<prefix>-plugin-<pluginId>-backend-module-<name>"}),": Optional modules related to the backend plugin package."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"<prefix>-plugin-<pluginId>-react"}),": Shared widgets, hooks and similar that both the plugin itself and third-party frontend plugins or modules can depend on."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"<prefix>-plugin-<pluginId>-node"}),": Utilities for backends that both the plugin backend itself and third-party backend plugins or modules can depend on."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"<prefix>-plugin-<pluginId>-common"}),": An isomorphic package with platform agnostic models, clients, and utilities that all packages above or any third-party plugin or module can depend on."]}),"\n"]}),"\n",(0,n.jsxs)(a.p,{children:["For example, a frontend package for the ",(0,n.jsx)(a.code,{children:"poetry"})," plugin might be called ",(0,n.jsx)(a.code,{children:"@example/backstage-plugin-poetry"}),", and a backend package for the same plugin might be called ",(0,n.jsx)(a.code,{children:"@example/backstage-plugin-poetry-backend"}),"."]}),"\n",(0,n.jsxs)(a.p,{children:["If you are creating a module for an existing package that is not part of your project, you should use the same prefix along with the plugin ID of the package that the module is for. For example, if you are creating a poetry provider module for ",(0,n.jsx)(a.code,{children:"@backstage/plugin-catalog-backend"}),", you might call it ",(0,n.jsx)(a.code,{children:"@example/backstage-plugin-catalog-backend-module-poetry-provider"}),"."]}),"\n",(0,n.jsx)(a.h3,{id:"repository",children:(0,n.jsx)(a.code,{children:"repository"})}),"\n",(0,n.jsxs)(a.p,{children:["The location of the source code for the package, as defined by ",(0,n.jsx)(a.a,{href:"https://docs.npmjs.com/cli/v10/configuring-npm/package-json#repository",children:"NPM"}),"."]}),"\n",(0,n.jsxs)(a.p,{children:["This field can be generated by the ",(0,n.jsx)(a.code,{children:"backstage-cli repo fix --publish"})," command. The only requirement is that the ",(0,n.jsx)(a.code,{children:"package.json"})," in your workspace root has the ",(0,n.jsx)(a.code,{children:"repository"})," field documented."]}),"\n",(0,n.jsx)(a.h3,{id:"main",children:(0,n.jsx)(a.code,{children:"main"})}),"\n",(0,n.jsxs)(a.p,{children:["The main entry point of the package, as defined by ",(0,n.jsx)(a.a,{href:"https://docs.npmjs.com/cli/v10/configuring-npm/package-json#main",children:"NPM"}),". In a standard Backstage setup this should point to the entry point for local development, typically ",(0,n.jsx)(a.code,{children:"src/index.ts"}),". This field along with other entry point fields such as ",(0,n.jsx)(a.code,{children:"module"})," and ",(0,n.jsx)(a.code,{children:"types"})," are rewritten when packaging the package for distribution. You can read more about this process in the ",(0,n.jsx)(a.a,{href:"/docs/tooling/cli/build-system#publishing",children:"publishing"})," section, and it is also used for ",(0,n.jsx)(a.a,{href:"/docs/tooling/cli/build-system#backend-production",children:"backend production builds"}),"."]}),"\n",(0,n.jsx)(a.h3,{id:"exports",children:(0,n.jsx)(a.code,{children:"exports"})}),"\n",(0,n.jsxs)(a.p,{children:["The exports of the package, as defined by ",(0,n.jsx)(a.a,{href:"https://nodejs.org/api/packages.html#exports",children:"Node.js"}),". This field is used to define the entry points of the package. As with other entry point fields, the exports should point to entry points for local development. They will the be rewritten when packaging the package for distribution. You can read more about this in the ",(0,n.jsx)(a.a,{href:"/docs/tooling/cli/build-system#subpath-exports",children:"sub-path exports"})," section."]}),"\n",(0,n.jsx)(a.h3,{id:"typeversions",children:(0,n.jsx)(a.code,{children:"typeVersions"})}),"\n",(0,n.jsxs)(a.p,{children:["This field is used to specify versioned type entry points for the package, as defined by ",(0,n.jsx)(a.a,{href:"https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#version-selection-with-typesversions",children:"TypeScript"}),", and is used as the equivalent of the ",(0,n.jsx)(a.code,{children:"exports"})," field. TypeScript does support type declarations in the ",(0,n.jsx)(a.code,{children:"exports"})," field, but that requires that the ",(0,n.jsx)(a.code,{children:"moduleResolution"})," option in ",(0,n.jsx)(a.code,{children:"tsconfig.json"})," is set to ",(0,n.jsx)(a.code,{children:"node16"})," or ",(0,n.jsx)(a.code,{children:"bundler"}),", which the Backstage ecosystem currently does not support."]}),"\n",(0,n.jsxs)(a.p,{children:["This field can be generated by the ",(0,n.jsx)(a.code,{children:"backstage-cli repo fix"})," command. First fill out the ",(0,n.jsx)(a.code,{children:"exports"})," field to point to source fields, which will then be used to generate ",(0,n.jsx)(a.code,{children:"typeVersions"}),"."]}),"\n",(0,n.jsx)(a.h3,{id:"sideeffects",children:(0,n.jsx)(a.code,{children:"sideEffects"})}),"\n",(0,n.jsxs)(a.p,{children:["This field declares whether it is safe to remove unused code through tree shaking when bundling this package into a frontend build, and is defined for example by ",(0,n.jsx)(a.a,{href:"https://github.com/backstage/backstage/blob/8d5cdb5d536cc8eb444da4b57dca4e36716f4535/plugins/auth-backend-module-google-provider/config.d.ts#L22",children:"WebPack"}),"."]}),"\n",(0,n.jsxs)(a.p,{children:["This field can be generated by the ",(0,n.jsx)(a.code,{children:"backstage-cli repo fix"})," command. It will set to ",(0,n.jsx)(a.code,{children:"false"})," by default for all frontend packages, since Backstage frontend packages should generally never have any side effects. If your package does have side effects, you can set explicitly set this field to ",(0,n.jsx)(a.code,{children:"true"}),"."]}),"\n",(0,n.jsx)(a.h3,{id:"scripts",children:(0,n.jsx)(a.code,{children:"scripts"})}),"\n",(0,n.jsxs)(a.p,{children:["The package scripts as defined by ",(0,n.jsx)(a.a,{href:"https://docs.npmjs.com/cli/v10/configuring-npm/package-json#scripts",children:"NPM"}),". The Backstage CLI provides a set of standard scripts, which you can read more about in the ",(0,n.jsx)(a.a,{href:"/docs/tooling/cli/build-system",children:"build system"})," section. The full list of scripts is as follows:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:'"scripts": {\n  "start": "backstage-cli package start",\n  "build": "backstage-cli package build",\n  "lint": "backstage-cli package lint",\n  "test": "backstage-cli package test",\n  "clean": "backstage-cli package clean",\n  "prepack": "backstage-cli package prepack",\n  "postpack": "backstage-cli package postpack"\n}\n'})}),"\n",(0,n.jsx)(a.h3,{id:"configschema",children:(0,n.jsx)(a.code,{children:"configSchema"})}),"\n",(0,n.jsxs)(a.p,{children:["The Backstage configuration schema for the package, as described in the ",(0,n.jsx)(a.a,{href:"/docs/conf/defining",children:"defining configuration"})," section."]}),"\n",(0,n.jsx)(a.h3,{id:"backstage",children:(0,n.jsx)(a.code,{children:"backstage"})}),"\n",(0,n.jsx)(a.p,{children:"This field is a collection of Backstage specific metadata fields. It is required for all Backstage packages, and any package that defines this field is considered to be part of the Backstage ecosystem. All sub-fields of this collection are defined below."}),"\n",(0,n.jsx)(a.h3,{id:"backstagerole",children:(0,n.jsx)(a.code,{children:"backstage.role"})}),"\n",(0,n.jsxs)(a.p,{children:["This field defines the role of the package in the Backstage ecosystem. It can affect both the build process and runtime behavior, and signals the intended usage of the package to consumers. You can read more about this field in the ",(0,n.jsx)(a.a,{href:"/docs/tooling/cli/build-system#package-roles",children:"package roles"})," section."]}),"\n",(0,n.jsx)(a.h3,{id:"backstagepluginid",children:(0,n.jsx)(a.code,{children:"backstage.pluginId"})}),"\n",(0,n.jsxs)(a.p,{children:["For any package that is part of a plugin, this field should be set to the plugin ID. This is the same ID as you would pass to the ",(0,n.jsx)(a.code,{children:"createPlugin"}),", ",(0,n.jsx)(a.code,{children:"createBackendPlugin"}),", or ",(0,n.jsx)(a.code,{children:"createBackendModule"})," functions in the implementation of the package. It is also the same ID as the one described in the ",(0,n.jsx)(a.a,{href:"#name",children:"name"})," section."]}),"\n",(0,n.jsxs)(a.p,{children:["This field can be generated by the ",(0,n.jsx)(a.code,{children:"backstage-cli repo fix --publish"})," command. The plugin ID will be inferred from the package ",(0,n.jsx)(a.a,{href:"#name",children:"name"})," and ",(0,n.jsx)(a.a,{href:"#backstagerole",children:"role"}),". If the package name is not actually part of a plugin but still has ",(0,n.jsx)(a.code,{children:"plugin-*"})," in its name, you can set this field to be explicitly ",(0,n.jsx)(a.code,{children:"null"}),"."]}),"\n",(0,n.jsxs)(a.p,{children:["The presence of this field is checked by the ",(0,n.jsx)(a.code,{children:"backstage-cli package prepack"})," command, which is used to prepare a package for publishing. You can read more about this requirement in the section on ",(0,n.jsx)(a.a,{href:"#metadata-for-published-packages",children:"metadata for published packages"}),"."]}),"\n",(0,n.jsx)(a.h3,{id:"backstagepluginpackages",children:(0,n.jsx)(a.code,{children:"backstage.pluginPackages"})}),"\n",(0,n.jsx)(a.p,{children:"For any package that is part of a plugin, this field should be set to a list of all packages that are directly part of the same plugin. This includes frontend and backend plugin packages as well as related libraries, but not modules."}),"\n",(0,n.jsxs)(a.p,{children:["This field can be generated by the ",(0,n.jsx)(a.code,{children:"backstage-cli repo fix --publish"})," command. It will list all packages with the same ",(0,n.jsx)(a.a,{href:"#backstagepluginid",children:"plugin ID"})," in the workspace."]}),"\n",(0,n.jsxs)(a.p,{children:["The presence of this field is checked by the ",(0,n.jsx)(a.code,{children:"backstage-cli package prepack"})," command, which is used to prepare a package for publishing. You can read more about this requirement in the section on ",(0,n.jsx)(a.a,{href:"#metadata-for-published-packages",children:"metadata for published packages"}),"."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",metastring:'title="Example usage of the backstage.pluginPackages field"',children:'{\n  "name": "@backstage/plugin-catalog",\n  "backstage": {\n    "role": "frontend-plugin",\n    "pluginId": "catalog",\n    "pluginPackages": [\n      "@backstage/plugin-catalog",\n      "@backstage/plugin-catalog-backend",\n      "@backstage/plugin-catalog-common",\n      "@backstage/plugin-catalog-node",\n      "@backstage/plugin-catalog-react"\n    ]\n  }\n  ...\n}\n'})}),"\n",(0,n.jsx)(a.h3,{id:"backstagepluginpackage",children:(0,n.jsx)(a.code,{children:"backstage.pluginPackage"})}),"\n",(0,n.jsxs)(a.p,{children:["For any module package of a plugin, this field should be set to the ",(0,n.jsx)(a.a,{href:"#name",children:"name"})," of the plugin package that this is a module for."]}),"\n",(0,n.jsxs)(a.p,{children:["This field can be generated by the ",(0,n.jsx)(a.code,{children:"backstage-cli repo fix --publish"})," command. It checks for packages with a matching ",(0,n.jsx)(a.a,{href:"#backstagepluginid",children:"plugin ID"})," in the same workspace, but also knows the package names of the core feature plugin IDs such as ",(0,n.jsx)(a.code,{children:"catalog"}),", ",(0,n.jsx)(a.code,{children:"auth"}),", ",(0,n.jsx)(a.code,{children:"scaffolder"}),", etc. If the package name can not be inferred, it has to be provided manually."]}),"\n",(0,n.jsxs)(a.p,{children:["The presence of this field is checked by the ",(0,n.jsx)(a.code,{children:"backstage-cli package prepack"})," command, which is used to prepare a package for publishing. You can read more about this requirement in the section on ",(0,n.jsx)(a.a,{href:"#metadata-for-published-packages",children:"metadata for published packages"}),"."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",metastring:'title="Example usage of the backstage.pluginPackage field"',children:'{\n  "name": "@backstage/plugin-catalog-backend-module-github",\n  "backstage": {\n    "role": "backend-plugin-module",\n    "pluginId": "catalog",\n    "pluginPackage": "@backstage/plugin-catalog-backend"\n  }\n  ...\n}\n'})}),"\n",(0,n.jsx)(a.h3,{id:"backstagemoved",children:(0,n.jsx)(a.code,{children:"backstage.moved"})}),"\n",(0,n.jsx)(a.p,{children:"This field indicates that a package has been renamed and moved to a new location. This field is recognized by the Backstage CLI, where the version bump command will automatically switch to using the new package instead. The value of this field should be the new package name."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",metastring:'title="Example usage of the backstage.moved field"',children:'{\n  "name": "@backstage/plugin-azure-devops",\n  "backstage": {\n    "moved": "@backstage-community/plugin-azure-devops"\n  }\n  ...\n}\n'})}),"\n",(0,n.jsx)(a.h2,{id:"metadata-for-published-packages",children:"Metadata for Published Packages"}),"\n",(0,n.jsxs)(a.p,{children:["When publishing a package with the help of the Backstage CLI, there are a number of metadata checks that are performed to ensure that the package is correctly set up for the Backstage ecosystem. These checks are performed by the ",(0,n.jsx)(a.code,{children:"backstage-cli package prepack"})," command, which is used to prepare a package for publishing. These checks can all also be verified separately using the ",(0,n.jsx)(a.code,{children:"backstage-cli repo fix --publish"})," command, and in many cases the required metadata can be generated automatically. It is therefore important to make running the ",(0,n.jsx)(a.code,{children:"fix"})," command part of your workflow in any project that is publishing Backstage packages."]}),"\n",(0,n.jsxs)(a.p,{children:["To set this up, we recommend that you add the following script to the root ",(0,n.jsx)(a.code,{children:"package.json"})," of your workspace:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:'{\n  "scripts": {\n    "fix": "backstage-cli repo fix --publish"\n  }\n}\n'})}),"\n",(0,n.jsxs)(a.p,{children:["This allows anyone working in the repo to run ",(0,n.jsx)(a.code,{children:"yarn fix"})," to check and update all packages in the workspace."]}),"\n",(0,n.jsxs)(a.p,{children:["In addition, you should also add a check to your CI pipeline that ensures that there are no pending fixes. This is done by calling the command with the ",(0,n.jsx)(a.code,{children:"--check"})," flag, which in GitHub actions would look something like this:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-yaml",children:"- name: check for missing repo fixes\n  run: yarn fix --check\n"})}),"\n",(0,n.jsx)(a.p,{children:"Finally, if you are using Husky or any other pre-commit hook, you can also set up a hook to run the fix command before committing:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-js",children:'{\n  "lint-staged": {\n    "package.json": [\n      "yarn fix"\n    ]\n  }\n}\n'})})]})}function h(e={}){const{wrapper:a}={...(0,i.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},371426:(e,a,t)=>{var n=t(827378),i=Symbol.for("react.element"),s=Symbol.for("react.fragment"),c=Object.prototype.hasOwnProperty,o=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,r={key:!0,ref:!0,__self:!0,__source:!0};function l(e,a,t){var n,s={},l=null,d=null;for(n in void 0!==t&&(l=""+t),void 0!==a.key&&(l=""+a.key),void 0!==a.ref&&(d=a.ref),a)c.call(a,n)&&!r.hasOwnProperty(n)&&(s[n]=a[n]);if(e&&e.defaultProps)for(n in a=e.defaultProps)void 0===s[n]&&(s[n]=a[n]);return{$$typeof:i,type:e,key:l,ref:d,props:s,_owner:o.current}}a.Fragment=s,a.jsx=l,a.jsxs=l},541535:(e,a)=>{var t=Symbol.for("react.element"),n=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),s=Symbol.for("react.strict_mode"),c=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),r=Symbol.for("react.context"),l=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),h=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),u=Symbol.iterator;var f={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function k(e,a,t){this.props=e,this.context=a,this.refs=m,this.updater=t||f}function b(){}function x(e,a,t){this.props=e,this.context=a,this.refs=m,this.updater=t||f}k.prototype.isReactComponent={},k.prototype.setState=function(e,a){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,a,"setState")},k.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=k.prototype;var y=x.prototype=new b;y.constructor=x,g(y,k.prototype),y.isPureReactComponent=!0;var j=Array.isArray,v=Object.prototype.hasOwnProperty,w={current:null},_={key:!0,ref:!0,__self:!0,__source:!0};function T(e,a,n){var i,s={},c=null,o=null;if(null!=a)for(i in void 0!==a.ref&&(o=a.ref),void 0!==a.key&&(c=""+a.key),a)v.call(a,i)&&!_.hasOwnProperty(i)&&(s[i]=a[i]);var r=arguments.length-2;if(1===r)s.children=n;else if(1<r){for(var l=Array(r),d=0;d<r;d++)l[d]=arguments[d+2];s.children=l}if(e&&e.defaultProps)for(i in r=e.defaultProps)void 0===s[i]&&(s[i]=r[i]);return{$$typeof:t,type:e,key:c,ref:o,props:s,_owner:w.current}}function I(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var S=/\/+/g;function P(e,a){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var a={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return a[e]}))}(""+e.key):a.toString(36)}function E(e,a,i,s,c){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var r=!1;if(null===e)r=!0;else switch(o){case"string":case"number":r=!0;break;case"object":switch(e.$$typeof){case t:case n:r=!0}}if(r)return c=c(r=e),e=""===s?"."+P(r,0):s,j(c)?(i="",null!=e&&(i=e.replace(S,"$&/")+"/"),E(c,a,i,"",(function(e){return e}))):null!=c&&(I(c)&&(c=function(e,a){return{$$typeof:t,type:e.type,key:a,ref:e.ref,props:e.props,_owner:e._owner}}(c,i+(!c.key||r&&r.key===c.key?"":(""+c.key).replace(S,"$&/")+"/")+e)),a.push(c)),1;if(r=0,s=""===s?".":s+":",j(e))for(var l=0;l<e.length;l++){var d=s+P(o=e[l],l);r+=E(o,a,i,d,c)}else if(d=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=u&&e[u]||e["@@iterator"])?e:null}(e),"function"==typeof d)for(e=d.call(e),l=0;!(o=e.next()).done;)r+=E(o=o.value,a,i,d=s+P(o,l++),c);else if("object"===o)throw a=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===a?"object with keys {"+Object.keys(e).join(", ")+"}":a)+"). If you meant to render a collection of children, use an array instead.");return r}function C(e,a,t){if(null==e)return e;var n=[],i=0;return E(e,n,"","",(function(e){return a.call(t,e,i++)})),n}function R(e){if(-1===e._status){var a=e._result;(a=a()).then((function(a){0!==e._status&&-1!==e._status||(e._status=1,e._result=a)}),(function(a){0!==e._status&&-1!==e._status||(e._status=2,e._result=a)})),-1===e._status&&(e._status=0,e._result=a)}if(1===e._status)return e._result.default;throw e._result}var B={current:null},N={transition:null},O={ReactCurrentDispatcher:B,ReactCurrentBatchConfig:N,ReactCurrentOwner:w};a.Children={map:C,forEach:function(e,a,t){C(e,(function(){a.apply(this,arguments)}),t)},count:function(e){var a=0;return C(e,(function(){a++})),a},toArray:function(e){return C(e,(function(e){return e}))||[]},only:function(e){if(!I(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},a.Component=k,a.Fragment=i,a.Profiler=c,a.PureComponent=x,a.StrictMode=s,a.Suspense=d,a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,a.cloneElement=function(e,a,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=g({},e.props),s=e.key,c=e.ref,o=e._owner;if(null!=a){if(void 0!==a.ref&&(c=a.ref,o=w.current),void 0!==a.key&&(s=""+a.key),e.type&&e.type.defaultProps)var r=e.type.defaultProps;for(l in a)v.call(a,l)&&!_.hasOwnProperty(l)&&(i[l]=void 0===a[l]&&void 0!==r?r[l]:a[l])}var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){r=Array(l);for(var d=0;d<l;d++)r[d]=arguments[d+2];i.children=r}return{$$typeof:t,type:e.type,key:s,ref:c,props:i,_owner:o}},a.createContext=function(e){return(e={$$typeof:r,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},a.createElement=T,a.createFactory=function(e){var a=T.bind(null,e);return a.type=e,a},a.createRef=function(){return{current:null}},a.forwardRef=function(e){return{$$typeof:l,render:e}},a.isValidElement=I,a.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:R}},a.memo=function(e,a){return{$$typeof:h,type:e,compare:void 0===a?null:a}},a.startTransition=function(e){var a=N.transition;N.transition={};try{e()}finally{N.transition=a}},a.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},a.useCallback=function(e,a){return B.current.useCallback(e,a)},a.useContext=function(e){return B.current.useContext(e)},a.useDebugValue=function(){},a.useDeferredValue=function(e){return B.current.useDeferredValue(e)},a.useEffect=function(e,a){return B.current.useEffect(e,a)},a.useId=function(){return B.current.useId()},a.useImperativeHandle=function(e,a,t){return B.current.useImperativeHandle(e,a,t)},a.useInsertionEffect=function(e,a){return B.current.useInsertionEffect(e,a)},a.useLayoutEffect=function(e,a){return B.current.useLayoutEffect(e,a)},a.useMemo=function(e,a){return B.current.useMemo(e,a)},a.useReducer=function(e,a,t){return B.current.useReducer(e,a,t)},a.useRef=function(e){return B.current.useRef(e)},a.useState=function(e){return B.current.useState(e)},a.useSyncExternalStore=function(e,a,t){return B.current.useSyncExternalStore(e,a,t)},a.useTransition=function(){return B.current.useTransition()},a.version="18.2.0"},827378:(e,a,t)=>{e.exports=t(541535)},824246:(e,a,t)=>{e.exports=t(371426)},511151:(e,a,t)=>{t.d(a,{Z:()=>o,a:()=>c});var n=t(667294);const i={},s=n.createContext(i);function c(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);