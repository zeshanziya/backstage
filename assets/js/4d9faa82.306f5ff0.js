/*! For license information please see 4d9faa82.306f5ff0.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[974503],{816319:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=n(824246),r=n(511151);const s={id:"testing",title:"Testing with Jest",description:"Documentation on How to do unit testing with Jest"},o=void 0,l={id:"plugins/testing",title:"Testing with Jest",description:"Documentation on How to do unit testing with Jest",source:"@site/../docs/plugins/testing.md",sourceDirName:"plugins",slug:"/plugins/testing",permalink:"/docs/plugins/testing",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/plugins/testing.md",tags:[],version:"current",frontMatter:{id:"testing",title:"Testing with Jest",description:"Documentation on How to do unit testing with Jest"},sidebar:"docs",previous:{title:"URL Reader",permalink:"/docs/plugins/url-reader"},next:{title:"Publish private",permalink:"/docs/plugins/publish-private"}},a={},c=[{value:"Running Tests",id:"running-tests",level:2},{value:"Naming Test Files",id:"naming-test-files",level:2},{value:"Third-Party Dependencies",id:"third-party-dependencies",level:2},{value:"Testing Utilities",id:"testing-utilities",level:2},{value:"Writing Unit Tests",id:"writing-unit-tests",level:2},{value:"Bad Unit Test Principle",id:"bad-unit-test-principle",level:3},{value:"Input/Output Principle",id:"inputoutput-principle",level:3},{value:"Blackbox Principle",id:"blackbox-principle",level:3},{value:"Scalability Principle",id:"scalability-principle",level:3},{value:"Increasing Complexity Principle",id:"increasing-complexity-principle",level:3},{value:"Broken Functionality Principle",id:"broken-functionality-principle",level:3},{value:"Example: Loading Indicator",id:"example-loading-indicator",level:3},{value:"Examples",id:"examples",level:2},{value:"Utility Functions",id:"utility-functions",level:3},{value:"Non-React Classes",id:"non-react-classes",level:3},{value:"API Testing Principles",id:"api-testing-principles",level:4},{value:"Mocking API Calls",id:"mocking-api-calls",level:4},{value:"React Components",id:"react-components",level:3},{value:"Working with the React Lifecycle",id:"working-with-the-react-lifecycle",level:4},{value:"Accessing <code>store</code>, <code>theme</code>, routing, browser history, etc",id:"accessing-store-theme-routing-browser-history-etc",level:4},{value:"Debugging Jest Tests",id:"debugging-jest-tests",level:2}];function u(e){const t=Object.assign({p:"p",a:"a",h2:"h2",pre:"pre",code:"code",strong:"strong",h3:"h3",blockquote:"blockquote",ul:"ul",li:"li",em:"em",ol:"ol",h4:"h4"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Backstage uses ",(0,i.jsx)(t.a,{href:"https://facebook.github.io/jest/",children:"Jest"})," for all our unit testing\nneeds."]}),"\n",(0,i.jsxs)(t.p,{children:["Jest is a Facebook-built unit testing framework specifically built for React. It\nfollows in the footsteps of other classic Node.js unit testing-related\nframeworks and libraries like ",(0,i.jsx)(t.a,{href:"https://mochajs.org/",children:"Mocha"}),",\n",(0,i.jsx)(t.a,{href:"https://jasmine.github.io/",children:"Jasmine"}),", and ",(0,i.jsx)(t.a,{href:"http://www.chaijs.com/",children:"Chai"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(t.p,{children:"Running all tests:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"yarn test\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Running an individual test (e.g. ",(0,i.jsx)(t.code,{children:"MyComponent.test.tsx"}),"):"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"yarn test MyComponent\n"})}),"\n",(0,i.jsxs)(t.p,{children:["To run both ",(0,i.jsx)(t.code,{children:"MyComponent.test.tsx"})," and ",(0,i.jsx)(t.code,{children:"MyControl.test.tsx"})," suite of tests:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"yarn test MyCo\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Note: if ",(0,i.jsx)(t.code,{children:"console.logs"})," are not appearing, run only the individual test you are\nworking on.\n",(0,i.jsx)(t.a,{href:"https://github.com/facebook/jest/issues/2441",children:"This is a bug in Jest"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"naming-test-files",children:"Naming Test Files"}),"\n",(0,i.jsxs)(t.p,{children:["Tests should be named ",(0,i.jsx)(t.code,{children:"[filename].test.ts"}),", or ",(0,i.jsx)(t.code,{children:"[filename].test.tsx"})," if it contains JSX (as is the case for a lot of React tests, e.g. components)."]}),"\n",(0,i.jsxs)(t.p,{children:["For example, the tests for ",(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"Link.tsx"})})," exist in the file ",(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"Link.test.tsx"})}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"third-party-dependencies",children:"Third-Party Dependencies"}),"\n",(0,i.jsxs)(t.p,{children:["Jest has its own built-in assertion library with ",(0,i.jsx)(t.code,{children:"expect"}),", so there is no need\nto ",(0,i.jsx)(t.code,{children:"import"})," a third-party library like some of the older frameworks required.\nHowever since assertion libraries simply throw errors, it would be feasible to\nimport a third-party library if you needed (like Chai or\n",(0,i.jsx)(t.a,{href:"http://sinonjs.org/",children:"Sinon"}),")."]}),"\n",(0,i.jsxs)(t.p,{children:["We use the light-weight\n",(0,i.jsx)(t.a,{href:"https://github.com/kentcdodds/react-testing-library",children:"react-testing-library"})," to\nrender React components."]}),"\n",(0,i.jsx)(t.h2,{id:"testing-utilities",children:"Testing Utilities"}),"\n",(0,i.jsx)(t.p,{children:"TODO."}),"\n",(0,i.jsx)(t.h2,{id:"writing-unit-tests",children:"Writing Unit Tests"}),"\n",(0,i.jsx)(t.p,{children:"The following principles are good guides for determining if you are writing high\nquality frontend unit tests."}),"\n",(0,i.jsx)(t.h3,{id:"bad-unit-test-principle",children:"Bad Unit Test Principle"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"No unit test is better than a bad one."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Writing a poor unit test:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Gives the illusion your code is more secure or reliable than it actually is."}),"\n",(0,i.jsx)(t.li,{children:"Functions equivalent to a bad comment, in that it leads the next developer\ninto erroneous assumptions."}),"\n",(0,i.jsx)(t.li,{children:"Adds to future work by requiring updates to the unit test for irrelevant code\nchanges."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"inputoutput-principle",children:"Input/Output Principle"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"A unit test verifies an output matches an expected input."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"For backend, this would be that when you provide configuration X, then the\nobject responds with Y. For frontend, this would be that when you provide\nproperties X to a component, then the visual functionality responds with Y."}),"\n",(0,i.jsx)(t.h3,{id:"blackbox-principle",children:"Blackbox Principle"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"A good unit test does not tell the object how it should do its job but should\nonly compare inputs to outputs."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Consider a unit test for a form. A good unit test would not test the order of\nthe form fields. Instead, it would verify that the inputs to the form fields\nlead to a certain backend call when submit is clicked."}),"\n",(0,i.jsx)(t.h3,{id:"scalability-principle",children:"Scalability Principle"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Unit test quality is directly proportionate to how much code can change\nwithout having to touch the unit test."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["This is often overlooked! A unit test is not a test to verify the code never\nchanges. Poor unit tests are written so that every time you make a tiny change\nto the code, you have to update the unit test. A good unit test suite allows a\nlot of flexibility in ",(0,i.jsx)(t.em,{children:"how"})," the code is written so that future refactoring can\noccur without having to touch the original unit tests."]}),"\n",(0,i.jsx)(t.h3,{id:"increasing-complexity-principle",children:"Increasing Complexity Principle"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"The ordering of unit tests in a suite should proceed from least specific to\nmost specific."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Jest runs all tests in the order in which they are provided, regardless of the\ndepth of ",(0,i.jsx)(t.code,{children:"describe()"})," blocks you provide. We can use this to help us write tests\nthat will help the next developer debug what they broke."]}),"\n",(0,i.jsx)(t.p,{children:"The idea here is that if they were to break a unit test, the next developer\nshould be able to tell from the order in which the tests broke what they should\ndo to fix things."}),"\n",(0,i.jsx)(t.p,{children:"For example, good unit tests will verify the arguments to a function in a test\nprior to a test that validates the output. If you do not test this, then simply\nthrowing an error saying that output was incorrect will lead the next developer\ninto thinking they may have broken the entire functionality of the object rather\nthan simply letting them know they had an invalid input."}),"\n",(0,i.jsx)(t.h3,{id:"broken-functionality-principle",children:"Broken Functionality Principle"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Generally, a unit test should not test exactly how the output appears, it\nshould test that the functionality has an expected ",(0,i.jsx)(t.em,{children:"general"})," response to an\ninput change."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This piggybacks the Scalability Principle and applies primarily to frontend\ndevelopment. As a general guideline, frontends should be flexible enough so\nthat the UX or design can change while touching the least amount of code\npossible. So for example, a poor unit test would verify the color of a button\nwhen it is hovered. This would be a poor unit test, because if you decide to\ntest a slightly different color on the button the unit test will break. A better\nunit test would verify that the button's CSS classname is assigned properly on\nhover or test for something completely different."}),"\n",(0,i.jsx)(t.h3,{id:"example-loading-indicator",children:"Example: Loading Indicator"}),"\n",(0,i.jsx)(t.p,{children:"A classic unit test on frontends is verifying a loading indicator displays when\na backend request is being made."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsxs)(t.strong,{children:["Here are some things we could test for ",(0,i.jsx)(t.em,{children:"when data is loading"}),":"]})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Did the internal ",(0,i.jsx)(t.code,{children:"loading"})," state of the component change? (poor)"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This is not a great test because it does not actually test that the\nfunctionality (displaying a message to the user) actually happens. It also\nbreaks the Blackbox Principle by expecting the internals of the component must\nwork a certain way. This could be a good test on its own right, but it does not\nactually achieve the goal of verifying that if our input (loading data) occurs,\nthen the output (displaying a message to the user) has happened."}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Did the text ",(0,i.jsx)(t.code,{children:'"Loading!"'})," appear in the DOM? (better)"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["This is a better test because it validates functionality, but it breaks the\nScalability principle. By testing for ",(0,i.jsx)(t.code,{children:"'Loading...'"})," we are linking our test\ncode to the component's message. If we want to add internationalization or\nsimply change the message to something more specific we will break our test and\nhave to update code in two places."]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Did ",(0,i.jsx)(t.code,{children:"<Loading />"})," get mounted? (best)"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This is the best test of these examples (there could be more depending on your\nimplementation)."}),"\n",(0,i.jsxs)(t.p,{children:["Verifying that ",(0,i.jsx)(t.code,{children:"<Loading />"})," is mounted when data is loading is the best test\nbecause it fulfills all the principles above:"]}),"\n",(0,i.jsxs)(t.p,{children:["\u2713 ",(0,i.jsx)(t.strong,{children:"Fulfills Input/Output Principle"}),": Verifies the output changes when the\ninput changes"]}),"\n",(0,i.jsxs)(t.p,{children:["\u2713 ",(0,i.jsx)(t.strong,{children:"Fulfills Blackbox Principle"}),": Does not verify ",(0,i.jsx)(t.em,{children:"how"})," the ",(0,i.jsx)(t.code,{children:"<Loading />"}),"\ncomponent is mounted, just that it is mounted in response to the input."]}),"\n",(0,i.jsxs)(t.p,{children:["\u2713 ",(0,i.jsx)(t.strong,{children:"Fulfills Scalability Principle"}),": If we decide to refactor the entire way\nthe loading indicator has displayed the test still works without touching it."]}),"\n",(0,i.jsxs)(t.p,{children:["\u2713 ",(0,i.jsx)(t.strong,{children:"Fulfills Broken Functionality Principle"}),": this test verifies the\nfunctionality (displaying an indicator) is working, rather than how it is\nworking."]}),"\n",(0,i.jsx)(t.p,{children:"The increasing complexity principle does not really apply to this example, so it\nwas excluded. However if you were to place this test in a suite of other tests,\nit would be best to test first that when the component is instructed to load\ndata then it actually does it. this way both tests fail if the data loading part\nbreaks and the next developer immediately know the problem is that the data\nloading is broken, not that the loading indicator is broken."}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.h3,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,i.jsx)(t.p,{children:"A utility function is a function with no side effects. It takes in arguments and\nreturns a result or displays an error or console message, like so:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"StringUtil ellipsis"})})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"export function ellipsis(text, maxLength, midCharIx = 0, ellipsis = '...') {\n  // Do something blackbox. We should not care about the internals,\n  // only inputs and outputs.\n  ...\n  return someFinalValue;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"There are four things to test for in a utility function:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Handle Invalid Input"}),"\n",(0,i.jsx)(t.li,{children:"Verify default input arguments"}),"\n",(0,i.jsx)(t.li,{children:"Verify output for expected input arguments"}),"\n",(0,i.jsx)(t.li,{children:"Handle thrown errors"}),"\n"]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Handle Invalid Input (handle thrown errors):"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"it('Throws an error on improper arguments', () => {\n  expect(() => {\n    ellipsis();\n  }).toThrowError(\"Expected 'text' to be defined\");\n});\n"})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Verify default input arguments:"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"it('Works with defaults', () => {\n  expect(ellipsis('Hello world', 3)).toBe('Hel...');\n  expect(ellipsis('', 3)).toBe('');\n  expect(ellipsis('H', 3)).toBe('H');\n  expect(ellipsis('Hello', 5)).toBe('Hello');\n});\n"})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Verify output for expected input arguments:"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This is especially true for edge cases!"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"it('Works with midCharIx', () => {\n  expect(ellipsis('Hello world', 3, 6)).toBe('...o w...');\n  expect(ellipsis('', 3, 6)).toBe('');\n  expect(ellipsis('Backstage is amazing', 4, 10)).toBe('...e is...');\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"non-react-classes",children:"Non-React Classes"}),"\n",(0,i.jsxs)(t.p,{children:["Testing a JavaScript object which is ",(0,i.jsx)(t.em,{children:"not"})," a React component follows a lot of\nthe same principles as testing objects in other languages."]}),"\n",(0,i.jsx)(t.h4,{id:"api-testing-principles",children:"API Testing Principles"}),"\n",(0,i.jsx)(t.p,{children:"Testing an API involves verifying four things:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Invalid inputs are caught before being sent to the server."}),"\n",(0,i.jsx)(t.li,{children:"Valid inputs translate into a valid browser request."}),"\n",(0,i.jsx)(t.li,{children:"Server response is translated into an expected JavaScript object."}),"\n",(0,i.jsx)(t.li,{children:"Server errors are handled gracefully."}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"mocking-api-calls",children:"Mocking API Calls"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://facebook.github.io/jest/docs/en/mock-functions.html",children:"Mocking in Jest"}),"\ninvolves wrapping existing functions (like an API call function) with an\nalternative."]}),"\n",(0,i.jsx)(t.p,{children:"For example:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"./MyApi.ts"})})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"export async function fetchSomethingFromServer() {\n  // Live production call to a URI. Must be avoided during testing!\n  return fetch('blah');\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"./__mocks__/MyApi.ts"})})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"export async function fetchSomethingFromServer() {\n  // Simulate a production call response\n  return 'some result object simulating server data here';\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"./MyApi.test.ts"})})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"// This import will actually return the contents of the file in the\n// __mocks__ folder now, due to the jest.mock line below\nimport { fetchSomethingFromServer } from './MyApi';\n\n// This instructs Jest to swap all imports of './MyApi.ts' to\n// './__mocks__/MyApi.ts' - this gets automatically hoisted to the top\n// of the file\njest.mock('./MyApi');\n\nit('loads data', async () => {\n  await expect(fetchSomethingFromServer()).resolves.toBe(\n    'some result object simulating server data here',\n  );\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"react-components",children:"React Components"}),"\n",(0,i.jsx)(t.h4,{id:"working-with-the-react-lifecycle",children:"Working with the React Lifecycle"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.a,{href:"https://reactjs.org/docs/state-and-lifecycle.html",children:"React lifecycle"})," is\nasynchronous."]}),"\n",(0,i.jsxs)(t.p,{children:["When you call ",(0,i.jsx)(t.code,{children:"setState"})," or update the ",(0,i.jsx)(t.code,{children:"props"})," of a component, there are several\nasynchronous stages that must occur before a rerender. Note the following\nexample:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"class MyComponent extends Component {\n  load() {\n    this.setState({loading: true});\n  }\n\n  render() {\n    return this.state.loading ? <Loading /> : 'Finished!';\n  }\n}\n\n...\n\n// INCORRECT\nit('Test loading', () => {\n  const wrapper = mount(<MyComponent />);\n  wrapper.load();\n  expect(wrapper.find('Loading').length).toEqual(1); // Will fail\n});\n\n// CORRECT\nit('Test loading', () => {\n  const wrapper = mount(<MyComponent />);\n  wrapper.load();\n  wrapper.update(); // This tells the components to run through a render cycle\n  expect(wrapper.find('Loading').length).toEqual(1);\n});\n"})}),"\n",(0,i.jsx)(t.p,{children:"For more information:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://reactjs.org/docs/state-and-lifecycle.html",children:"React lifecycle"})}),"\n"]}),"\n",(0,i.jsxs)(t.h4,{id:"accessing-store-theme-routing-browser-history-etc",children:["Accessing ",(0,i.jsx)(t.code,{children:"store"}),", ",(0,i.jsx)(t.code,{children:"theme"}),", routing, browser history, etc"]}),"\n",(0,i.jsx)(t.p,{children:'The Backstage application has several core providers at its root. To run your\ntest wrapped in a "sample" Backstage application, you can use our utility\nfunctions:'}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"wrapInTestApp"})})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"import { wrapInTestApp } from '../../test-utils';\n...\nit('Definitely is not a coconut', () => {\n  const mangoWrapper = mount(wrapInTestApp(<Mango />));\n\n  expect(mangoWrapper.context().store).toBeDefined();\n});\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Note: wrapping in the test application ",(0,i.jsx)(t.strong,{children:"requires"})," you to do a ",(0,i.jsx)(t.code,{children:"find()"})," or\n",(0,i.jsx)(t.code,{children:"dive()"})," since the wrapped component is now the application."]}),"\n",(0,i.jsx)(t.h2,{id:"debugging-jest-tests",children:"Debugging Jest Tests"}),"\n",(0,i.jsxs)(t.p,{children:["You can find it ",(0,i.jsx)(t.a,{href:"https://backstage.io/docs/local-dev/cli-build-system#debugging-jest-tests",children:"here"})]})]})}const d=function(e={}){const{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?(0,i.jsx)(t,Object.assign({},e,{children:(0,i.jsx)(u,e)})):u(e)}},371426:(e,t,n)=>{var i=n(827378),r=Symbol.for("react.element"),s=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,l=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,a={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var i,s={},c=null,u=null;for(i in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(u=t.ref),t)o.call(t,i)&&!a.hasOwnProperty(i)&&(s[i]=t[i]);if(e&&e.defaultProps)for(i in t=e.defaultProps)void 0===s[i]&&(s[i]=t[i]);return{$$typeof:r,type:e,key:c,ref:u,props:s,_owner:l.current}}t.Fragment=s,t.jsx=c,t.jsxs=c},541535:(e,t)=>{var n=Symbol.for("react.element"),i=Symbol.for("react.portal"),r=Symbol.for("react.fragment"),s=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),a=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),h=Symbol.for("react.lazy"),p=Symbol.iterator;var f={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,x={};function y(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||f}function m(){}function j(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||f}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},m.prototype=y.prototype;var b=j.prototype=new m;b.constructor=j,g(b,y.prototype),b.isPureReactComponent=!0;var v=Array.isArray,w=Object.prototype.hasOwnProperty,k={current:null},_={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,i){var r,s={},o=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(o=""+t.key),t)w.call(t,r)&&!_.hasOwnProperty(r)&&(s[r]=t[r]);var a=arguments.length-2;if(1===a)s.children=i;else if(1<a){for(var c=Array(a),u=0;u<a;u++)c[u]=arguments[u+2];s.children=c}if(e&&e.defaultProps)for(r in a=e.defaultProps)void 0===s[r]&&(s[r]=a[r]);return{$$typeof:n,type:e,key:o,ref:l,props:s,_owner:k.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,r,s,o){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var a=!1;if(null===e)a=!0;else switch(l){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case n:case i:a=!0}}if(a)return o=o(a=e),e=""===s?"."+R(a,0):s,v(o)?(r="",null!=e&&(r=e.replace(C,"$&/")+"/"),P(o,t,r,"",(function(e){return e}))):null!=o&&(T(o)&&(o=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,r+(!o.key||a&&a.key===o.key?"":(""+o.key).replace(C,"$&/")+"/")+e)),t.push(o)),1;if(a=0,s=""===s?".":s+":",v(e))for(var c=0;c<e.length;c++){var u=s+R(l=e[c],c);a+=P(l,t,r,u,o)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(l=e.next()).done;)a+=P(l=l.value,t,r,u=s+R(l,c++),o);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return a}function I(e,t,n){if(null==e)return e;var i=[],r=0;return P(e,i,"","",(function(e){return t.call(n,e,r++)})),i}function E(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var A={current:null},F={transition:null},O={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:F,ReactCurrentOwner:k};t.Children={map:I,forEach:function(e,t,n){I(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return I(e,(function(){t++})),t},toArray:function(e){return I(e,(function(e){return e}))||[]},only:function(e){if(!T(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=r,t.Profiler=o,t.PureComponent=j,t.StrictMode=s,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,t.cloneElement=function(e,t,i){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=g({},e.props),s=e.key,o=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,l=k.current),void 0!==t.key&&(s=""+t.key),e.type&&e.type.defaultProps)var a=e.type.defaultProps;for(c in t)w.call(t,c)&&!_.hasOwnProperty(c)&&(r[c]=void 0===t[c]&&void 0!==a?a[c]:t[c])}var c=arguments.length-2;if(1===c)r.children=i;else if(1<c){a=Array(c);for(var u=0;u<c;u++)a[u]=arguments[u+2];r.children=a}return{$$typeof:n,type:e.type,key:s,ref:o,props:r,_owner:l}},t.createContext=function(e){return(e={$$typeof:a,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=T,t.lazy=function(e){return{$$typeof:h,_payload:{_status:-1,_result:e},_init:E}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=F.transition;F.transition={};try{e()}finally{F.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return A.current.useCallback(e,t)},t.useContext=function(e){return A.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return A.current.useDeferredValue(e)},t.useEffect=function(e,t){return A.current.useEffect(e,t)},t.useId=function(){return A.current.useId()},t.useImperativeHandle=function(e,t,n){return A.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return A.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return A.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return A.current.useMemo(e,t)},t.useReducer=function(e,t,n){return A.current.useReducer(e,t,n)},t.useRef=function(e){return A.current.useRef(e)},t.useState=function(e){return A.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return A.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return A.current.useTransition()},t.version="18.2.0"},827378:(e,t,n)=>{e.exports=n(541535)},824246:(e,t,n)=>{e.exports=n(371426)},511151:(e,t,n)=>{n.d(t,{Zo:()=>l,ah:()=>s});var i=n(667294);const r=i.createContext({});function s(e){const t=i.useContext(r);return i.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const o={};function l({components:e,children:t,disableParentContext:n}){let l;return l=n?"function"==typeof e?e({}):e||o:s(e),i.createElement(r.Provider,{value:l},t)}}}]);